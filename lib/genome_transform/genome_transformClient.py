# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class genome_transform(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def genbank_to_genome(self, genbank_to_genome_params, context=None):
        """
        :param genbank_to_genome_params: instance of type
           "genbank_to_genome_params" (Input parameters for the
           "genbank_to_genome" function. shock_ref genbank_shock_ref -
           optional URL to genbank file stored in Shock file_path
           genbank_file_path - optional path to genbank file on local file
           system workspace_id workspace - workspace where object will be
           saved object_id genome_id - workspace ID to which the genome
           object should be saved object_id contigset_id - workspace ID to
           which the contigs should be saved) -> structure: parameter
           "genbank_shock_ref" of type "shock_ref" (URL to a shock node
           containing a data file for upload), parameter "genbank_file_path"
           of type "file_path" (Path to a file containing a data file for
           upload on the local filesystem), parameter "workspace" of type
           "workspace_id" (Name of a KBase workspace), parameter "genome_id"
           of type "object_id" (Name of an object in the KBase workspace),
           parameter "contigset_id" of type "object_id" (Name of an object in
           the KBase workspace)
        :returns: instance of type "object_id" (Name of an object in the
           KBase workspace)
        """
        return self._client.call_method(
            'genome_transform.genbank_to_genome',
            [genbank_to_genome_params], self._service_ver, context)

    def fasta_to_contig(self, fasta_to_contig_params, context=None):
        """
        :param fasta_to_contig_params: instance of type
           "fasta_to_contig_params" (Input parameters for the
           "fasta_to_contig" function. shock_ref shock_ref - optional URL to
           fasta file stored in Shock file_path file_path - optional path to
           fasta file on local file system workspace_id workspace - workspace
           where object will be saved object_id genome_id - workspace ID to
           which the contigs object should be saved object_id contigset_id -
           workspace ID to which the contigs should be saved) -> structure:
           parameter "fasta_shock_ref" of type "shock_ref" (URL to a shock
           node containing a data file for upload), parameter
           "fasta_file_path" of type "file_path" (Path to a file containing a
           data file for upload on the local filesystem), parameter
           "workspace" of type "workspace_id" (Name of a KBase workspace),
           parameter "genome_id" of type "object_id" (Name of an object in
           the KBase workspace), parameter "contigset_id" of type "object_id"
           (Name of an object in the KBase workspace)
        :returns: instance of type "object_id" (Name of an object in the
           KBase workspace)
        """
        return self._client.call_method(
            'genome_transform.fasta_to_contig',
            [fasta_to_contig_params], self._service_ver, context)

    def tsv_to_exp(self, tsv_to_exp_params, context=None):
        """
        :param tsv_to_exp_params: instance of type "tsv_to_exp_params" (Input
           parameters for the "exp tsv to exp matirx" function. shock_ref
           shock_ref - optional URL to genbank file stored in Shock file_path
           file_path - optional path to genbank file on local file system
           workspace_id workspace - workspace where object will be saved
           object_id genome_id - workspace ID to which the genome object
           should be saved object_id contigset_id - workspace ID to which the
           contigs should be saved) -> structure: parameter
           "tsvexp_shock_ref" of type "shock_ref" (URL to a shock node
           containing a data file for upload), parameter "tsvexp_file_path"
           of type "file_path" (Path to a file containing a data file for
           upload on the local filesystem), parameter "workspace" of type
           "workspace_id" (Name of a KBase workspace), parameter "genome_id"
           of type "object_id" (Name of an object in the KBase workspace),
           parameter "expMaxId" of type "object_id" (Name of an object in the
           KBase workspace)
        :returns: instance of type "object_id" (Name of an object in the
           KBase workspace)
        """
        return self._client.call_method(
            'genome_transform.tsv_to_exp',
            [tsv_to_exp_params], self._service_ver, context)

    def reads_to_assembly(self, reads_to_assembly_params, context=None):
        """
        :param reads_to_assembly_params: instance of type
           "reads_to_assembly_params" -> structure: parameter
           "reads_shock_ref" of type "shock_ref" (URL to a shock node
           containing a data file for upload), parameter "reads_handle_ref"
           of type "handle_ref" (Name of a KBase handle ref), parameter
           "reads_type" of String, parameter "file_path_list" of list of
           String, parameter "rnaSeqMetaData" of mapping from String to type
           "rnaSeqMeta" (Input parameters for the "reads to assembly"
           function. shock_ref shock_ref - optional URL to genbank file
           stored in Shock file_path file_path - optional path to genbank
           file on local file system workspace_id workspace - workspace where
           object will be saved object_id reads_id - workspace ID to which
           the genome object should be saved object_id contigset_id -
           workspace ID to which the contigs should be saved) -> structure:
           parameter "domain" of String, parameter "platform" of String,
           parameter "sample_id" of String, parameter "condition" of String,
           parameter "source" of String, parameter "Library_type" of String,
           parameter "publication_Id" of String, parameter
           "external_source_date" of String, parameter "sra" of String,
           parameter "workspace" of type "workspace_id" (Name of a KBase
           workspace), parameter "reads_id" of type "object_id" (Name of an
           object in the KBase workspace), parameter "outward" of String,
           parameter "insert_size" of Double, parameter "std_dev" of Double
        :returns: instance of type "object_id" (Name of an object in the
           KBase workspace)
        """
        return self._client.call_method(
            'genome_transform.reads_to_assembly',
            [reads_to_assembly_params], self._service_ver, context)

    def sra_reads_to_assembly(self, sra_reads_to_assembly_params, context=None):
        """
        :param sra_reads_to_assembly_params: instance of type
           "sra_reads_to_assembly_params" -> structure: parameter
           "reads_shock_ref" of type "shock_ref" (URL to a shock node
           containing a data file for upload), parameter "reads_handle_ref"
           of type "handle_ref" (Name of a KBase handle ref), parameter
           "reads_type" of String, parameter "file_path_list" of list of
           String, parameter "workspace" of type "workspace_id" (Name of a
           KBase workspace), parameter "reads_id" of type "object_id" (Name
           of an object in the KBase workspace), parameter "outward" of
           String, parameter "insert_size" of Double, parameter "std_dev" of
           Double
        :returns: instance of type "object_id" (Name of an object in the
           KBase workspace)
        """
        return self._client.call_method(
            'genome_transform.sra_reads_to_assembly',
            [sra_reads_to_assembly_params], self._service_ver, context)

    def rna_sample_set(self, rna_sample_set_params, context=None):
        """
        :param rna_sample_set_params: instance of type
           "rna_sample_set_params" -> structure: parameter "workspace" of
           type "workspace_id" (Name of a KBase workspace), parameter
           "domain" of String, parameter "sampleset_id" of String, parameter
           "sampleset_desc" of String, parameter "rnaSeqMeta" of list of type
           "reads_to_assembly_params" -> structure: parameter
           "reads_shock_ref" of type "shock_ref" (URL to a shock node
           containing a data file for upload), parameter "reads_handle_ref"
           of type "handle_ref" (Name of a KBase handle ref), parameter
           "reads_type" of String, parameter "file_path_list" of list of
           String, parameter "rnaSeqMetaData" of mapping from String to type
           "rnaSeqMeta" (Input parameters for the "reads to assembly"
           function. shock_ref shock_ref - optional URL to genbank file
           stored in Shock file_path file_path - optional path to genbank
           file on local file system workspace_id workspace - workspace where
           object will be saved object_id reads_id - workspace ID to which
           the genome object should be saved object_id contigset_id -
           workspace ID to which the contigs should be saved) -> structure:
           parameter "domain" of String, parameter "platform" of String,
           parameter "sample_id" of String, parameter "condition" of String,
           parameter "source" of String, parameter "Library_type" of String,
           parameter "publication_Id" of String, parameter
           "external_source_date" of String, parameter "sra" of String,
           parameter "workspace" of type "workspace_id" (Name of a KBase
           workspace), parameter "reads_id" of type "object_id" (Name of an
           object in the KBase workspace), parameter "outward" of String,
           parameter "insert_size" of Double, parameter "std_dev" of Double
        :returns: instance of type "object_id" (Name of an object in the
           KBase workspace)
        """
        return self._client.call_method(
            'genome_transform.rna_sample_set',
            [rna_sample_set_params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('genome_transform.status',
                                        [], self._service_ver, context)
